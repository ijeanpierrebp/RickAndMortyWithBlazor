@* @page "/result" *@
@page "/result/{_param?}"
@page "/result/{_param?}/gender/{_genero?}"
@inject IHttpClientFactory httpF
@rendermode InteractiveAuto
<h3>ForResult: @_param</h3>
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

<input type="text" @bind="_param" @bind:event="oninput" @onkeydown="Buscando" />
<p>Valor a buscar @_param</p>
@foreach (var Item in filtrado)
{
    <Card caracter="Item"></Card>
}

@code {
    [Parameter]
    public string? _param { get; set; } 
    
    [Parameter]
    public string? _genero { get; set; }

    List<Results>? filtrado = new List<Results>();  

    public CharacterResponse? total;

    protected override async Task OnInitializedAsync()
    {
        var apiCall = httpF.CreateClient("api");
        total = await apiCall.GetFromJsonAsync<CharacterResponse>("character");

        if(String.IsNullOrEmpty(_param)){
            filtrado = total.Results;
        }
        else
        {
            if (string.IsNullOrEmpty(_genero))
            filtrado = total.Results.Where(x => x.Name.Contains(_param, StringComparison.OrdinalIgnoreCase)).ToList();
            else
                filtrado = total.Results.Where(x => x.Name.Contains(_param, StringComparison.OrdinalIgnoreCase) && x.Gender==_genero).ToList();

        }
    }


    private void Buscando()
    {
    if (String.IsNullOrEmpty(_param)){
            filtrado = total?.Results;
            Console.WriteLine("esta vacio");
        }
            else
            filtrado = total?.Results.Where(x => x.Name.Contains(_param, StringComparison.OrdinalIgnoreCase)).ToList();
    }
}
